<div class="container mt-4">
  <h2>Detalles del Carrito - {{cart.first_name}} {{cart.last_name}}</h2>
  <table class="table">
    <thead>
      <tr>
        <th>ID</th>
        <th>Título</th>
        <th>Descripción</th>
        <th>Precio</th>
        <th>Categoría</th>
        <th>Cantidad</th>
        <th>Eliminar producto</th>
      </tr>
    </thead>
    <tbody>
      {{#each cart.cartProducts}}
        <tr>
          <td>{{this.product._id}}</td>
          <td>{{this.product.title}}</td>
          <td>{{this.product.description}}</td>
          <td>{{this.product.price}}</td>
          <td>{{this.product.category}}</td>
          <td>
            <input type="number" min="1" class="form-control qty-input" data-cart="{{../cart._id}}" data-product="{{this.product._id}}" value="{{this.qty}}">
          </td>
          <td>
            <button class="btn btn-danger delete-btn" data-cart="{{../cart._id}}" data-product="{{this.product._id}}">Eliminar</button>
          </td>
        </tr>
      {{/each}}
    </tbody>
  </table>
  <button class="btn btn-danger mt-4" onclick="clearCart('{{cart._id}}')">Vaciar Carrito</button>
</div>

<script>
// Detectar el cambio en el campo de cantidad
document.querySelectorAll('.qty-input').forEach(input => {
  input.addEventListener('change', function() {
    const newQty = this.value;
    const cartId = this.getAttribute('data-cart');
    const productId = this.getAttribute('data-product');

    if (newQty > 0) {
      updateQuantity(cartId, productId, newQty);
    } else {
      alert('La cantidad debe ser mayor que 0');
    }
  });
});

// Actualizar cantidad de producto
function updateQuantity(cartId, productId, newQty) {
  fetch(`/api/carts/${cartId}/products/${productId}/quantity`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ quantity: parseInt(newQty) })
  })
  .then(response => {
    if (response.ok) {
      return response.json();
    } else {
      return response.text().then(text => {
        throw new Error(`Error al actualizar la cantidad: ${text}`);
      });
    }
  })
  .then(data => {
    console.log('Cantidad actualizada:', data);
    window.location.reload();  // Recargar la página para ver los cambios
  })
  .catch(error => {
    alert(error.message);
    console.error('Error al actualizar la cantidad:', error);
  });
}

// Eliminar producto del carrito
document.querySelectorAll('.delete-btn').forEach(button => {
  button.addEventListener('click', function() {
    const cartId = this.getAttribute('data-cart');
    const productId = this.getAttribute('data-product');
    
    if (confirm('¿Estás seguro de eliminar este producto del carrito?')) {
      fetch(`/api/carts/${cartId}/products/${productId}`, {
        method: 'DELETE'
      })
      .then(response => {
        if (response.ok) {
          window.location.reload();
        } else {
          return response.text().then(text => {
            throw new Error(`Error al eliminar el producto: ${text}`);
          });
        }
      })
      .catch(error => {
        alert(error.message);
        console.error('Error al eliminar el producto:', error);
      });
    }
  });
});

// Vaciar carrito
function clearCart(cartId) {
  if (confirm('¿Estás seguro de vaciar este carrito?')) {
    fetch(`/api/carts/${cartId}`, { method: 'DELETE' })
    .then(response => {
      if (response.ok) {
        window.location.reload();
      } else {
        alert('Error al vaciar el carrito');
      }
    });
  }
}
</script>
